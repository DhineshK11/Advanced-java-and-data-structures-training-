#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the linked list
void insertNode(Node** head, int data) {
    Node* newNode = createNode(data);

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to delete the entire linked list
void deleteList(Node** head) {
    Node* current = *head;
    Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }

    *head = NULL;
}

// Function to print the linked list
void printList(Node* head) {
    Node* current = head;

    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }

    printf("\n");
}

int main() {
    Node* head = NULL;
    int numElements;
    int element;

    printf("Enter the number of elements in the linked list: ");
    scanf("%d", &numElements);

    printf("Enter the elements of the linked list: ");
    for (int i = 0; i < numElements; i++) {
        scanf("%d", &element);
        insertNode(&head, element);
    }

    printf("Linked List before deletion: ");
    printList(head);

    // Delete the entire linked list
    deleteList(&head);

    printf("Linked List after deletion: ");
    printList(head);

    return 0;
}
